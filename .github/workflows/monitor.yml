name: ACE Parking Monitor

on:
  # Run every 5 minutes
  schedule:
    - cron: '*/5 * * * *'
  
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      force_notification:
        description: 'Force send test notification'
        required: false
        type: boolean
        default: false

# Permissions for repo write
permissions:
  contents: write
  actions: write

jobs:
  check-parking:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    # Checkout repository - this gets the latest state file
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    # Set up Python
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    # Cache dependencies for faster runs
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    # Install Playwright browsers with fixed dependencies
    - name: Install Playwright browsers
      run: |
        # Install system dependencies first
        sudo apt-get update
        sudo apt-get install -y \
          libnss3 \
          libnspr4 \
          libatk1.0-0 \
          libatk-bridge2.0-0 \
          libcups2 \
          libdrm2 \
          libdbus-1-3 \
          libatspi2.0-0 \
          libx11-6 \
          libxcomposite1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxrandr2 \
          libgbm1 \
          libxcb1 \
          libxkbcommon0 \
          libpango-1.0-0 \
          libcairo2 \
          libasound2t64 || true
        
        # Now install Playwright browsers
        playwright install chromium
    
    # Run the parking monitor
    - name: Check parking availability
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        FORCE_NOTIFICATION: ${{ github.event.inputs.force_notification }}
      run: |
        python -m src.scraper
    
    # Commit state back to repo - THIS is what persists the state
    - name: Commit state changes
      if: always()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/last_state.json || true
        git add data/check_history.* || true
        git diff --quiet && git diff --staged --quiet || git commit -m "Update parking state [skip ci]"
        git push || true
      continue-on-error: true
    
    # Log results on failure
    - name: Check logs
      if: failure()
      run: |
        echo "Monitor failed. Check logs above for details."
        ls -la data/ || true
        cat data/last_state.json || true
        cat data/check_history.txt || true